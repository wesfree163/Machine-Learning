image_dir = r"C:\Users\Wes\Desktop\D2Exp"
image_size = (128, 128)

images, labels = [], []

for class_name in os.listdir(image_dir):
    class_path = os.path.join(image_dir, class_name)
    if os.path.isdir(class_path):
        for image_filename in os.listdir(class_path):
            image_path = os.path.join(class_path, image_filename)
            try:
                img = imread(image_path)
                if img is not None:
                    img_resized = resize(img, image_size, anti_aliasing=True)
                    images.append(img_resized.flatten())
                    labels.append(class_name)
            except Exception as e:
                print(f"Skipping {image_path}: {e}")

X = np.array(images)
y = np.array(labels)

print(f"Loaded {len(X)} samples.")

if len(X) > 0:
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    clf = SVC(kernel='linear', random_state=42)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print("Accuracy:", accuracy_score(y_test, y_pred))
else:
    print("No images found. Check directory structure and file types.")


robots_dir = r"C:\Users\Wes\Desktop\D2Exp\is_robot"
rooms_dir = r"C:\Users\Wes\Desktop\D2Exp\robots"

# Load robot templates
robot_templates = []
for file in os.listdir(robots_dir):
    if file.lower().endswith((".jpg", ".png")):
        template = cv2.imread(os.path.join(robots_dir, file), cv2.IMREAD_COLOR)
        if template is not None:
            robot_templates.append(cv2.cvtColor(template, cv2.COLOR_BGR2GRAY))

# Loop through each room image
for file in os.listdir(rooms_dir):
    if not file.lower().endswith((".jpg", ".png")):
        continue

    room_img = cv2.imread(os.path.join(rooms_dir, file))
    gray_room = cv2.cvtColor(room_img, cv2.COLOR_BGR2GRAY)
    count = 0

    for template in robot_templates:
        w, h = template.shape[::-1]
        res = cv2.matchTemplate(gray_room, template, cv2.TM_CCOEFF_NORMED)
        loc = np.where(res >= 0.6)  # adjust threshold 0.5â€“0.8
        detected_points = list(zip(*loc[::-1]))
        count += len(detected_points)

    print(f"{file}: Estimated {count} robot matches")